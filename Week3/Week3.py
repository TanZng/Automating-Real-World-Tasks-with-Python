#!/usr/bin/env python3
import emails
import reports

from operator import itemgetter
import os
import locale
import sys
import json 

def sales_per_year(data):
    ''' Retuns a dictionary with the total sales of every year '''
    car_sales ={}
    for item in data:
        car_year = item["car"]["car_year"]
        if( car_year in car_sales):
            car_sales[ car_year ] += item["total_sales"]
        else:
            car_sales[ car_year ] = item["total_sales"]
    return car_sales

def most_popular_car_year(data):
    '''Returns the most popular car_year across all car make/models 
    (in other words, find the total count of cars with the car_year 
    equal to 2005, equal to 2006, etc. and then figure out the most popular year)'''
    car_sales = sales_per_year(data)
    year = max(car_sales, key=car_sales.get)
    year_sales = car_sales[year]
    return "The most popular year was {} with {} sales.".format(year, year_sales)

def most_sales_car(data):
    ''' Returns the car model which had the most sales '''
    mostSalesCar = max(data, key=lambda x:x['total_sales'])
    car_model = format_car(mostSalesCar["car"])
    total_sales = mostSalesCar['total_sales']

    return "The {} had the most sales: {}".format(car_model, total_sales)

def format_car(car):
    ''' Formats car name '''
    string = ""
    string += str(car["car_make"]) + " "
    string += str(car["car_model"]) + " "
    string += "(" + str(car["car_year"]) + ")"
    return string

def process_data(data):
  """Analyzes the data, looking for maximums.

  Returns a list of lines that summarize the information.
  """
  max_revenue = {"revenue": 0}
  for item in data:
    # Calculate the revenue generated by this model (price * total_sales)
    # We need to convert the price from "$1234.56" to 1234.56
    item_price = locale.atof(item["price"].strip("$"))
    item_revenue = item["total_sales"] * item_price
    if item_revenue > max_revenue["revenue"]:
      item["revenue"] = item_revenue
      max_revenue = item

  summary = [
    "The {} generated the most revenue: ${}".format(
    format_car(max_revenue["car"]), max_revenue["revenue"]),
    most_popular_car_year(data),
    most_sales_car(data)
  ]

  return summary


def cars_dict_to_table(car_data):
  """Turns the data in car_data into a list of lists."""
  table_data = [["ID", "Car", "Price", "Total Sales"]]
  for item in car_data:
    table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
  return table_data

def load_data(filename):
    """Loads the contents of filename as a JSON file."""
    with open(filename) as json_file:
        data = json.load(json_file)
    return data

def generate_report(filename, title, additional_info, table_data):
    summary=''
    for line in additional_info:
        summary += line + '<br/>'
    reports.generate(filename, title, summary, table_data)

def send_report(summary):
    sender = "automation@example.com"
    receiver = "{}@example.com".format(os.environ.get('USER'))
    subject = "Sales summary for last month"
    body = '\n'.join(summary)
    message = emails.generate(sender, receiver, subject, body, "/tmp/cars.pdf")
    emails.send(message)

def main(argv):
  """Process the JSON data and generate a full report out of it."""
  data = load_data("car_sales.json")
  summary = process_data(data)
  table_data = cars_dict_to_table(data)
  print(summary)
  # TODO: turn this into a PDF report
  generate_report("/tmp/cars.pdf", "Sales summary for last month", summary, table_data)
  # TODO: send the PDF report as an email attachment
  send_report(summary)

if __name__ == "__main__":
  main(sys.argv)
